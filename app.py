import streamlit as st
import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Cargar dataset
dataset_path = "heart_failure_clinical_records_dataset.csv"
df = pd.read_csv(dataset_path)

# Cargar modelos guardados
modelos = {
    "üå≥ √Årbol de Decisi√≥n": "Modelos/arbol_base.pkl",
    "üåê Bagging": "Modelos/bagging.pkl",
    "üå≤ Random Forest": "Modelos/random_forest.pkl",
    "üìà Gradient Boosting": "Modelos/gradient_boosting.pkl",
    "üöÄ XGBoost": "Modelos/xg_boost.pkl"    
}

# Funci√≥n para cargar cada modelo
def cargar_modelo(nombre_modelo):
    with open(modelos[nombre_modelo], "rb") as file:
        return pickle.load(file)

# Funci√≥n para representar las m√©tricas de cada modelo
def mostrar_matriz_y_reporte(metrica, clase):
    """
    Funci√≥n para mostrar la matriz de confusi√≥n y el reporte de clasificaci√≥n.
    
    Par√°metros:
    - metrica: Diccionario con las m√©tricas de Train/Test cargadas desde el archivo.
    - clase: "Train" o "Test".
    """
    conf_matrix = metrica[clase]["confusion_matrix"]
    df_report = pd.DataFrame(metrica[clase]["classification_report"]).transpose().drop(["accuracy"], errors="ignore")

    # Crear la figura y los subplots m√°s compactos
    fig, axes = plt.subplots(1, 2, figsize=(8, 3))  

    # Matriz de Confusi√≥n
    sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
                xticklabels=["No", "Yes"], yticklabels=["No", "Yes"], ax=axes[0])
    axes[0].set_title(f"Matriz de Confusi√≥n - {clase}", fontsize=12, fontweight='bold')
    axes[0].set_xlabel("Predicci√≥n", fontsize=10)
    axes[0].set_ylabel("Valor Real", fontsize=10)

    # Reporte de Clasificaci√≥n
    df_report[['precision', 'recall', 'f1-score']].plot(kind='bar', colormap="coolwarm", ax=axes[1])
    axes[1].set_title(f"Reporte de Clasificaci√≥n - {clase}", fontsize=12, fontweight='bold')
    axes[1].set_xticklabels(df_report.index, rotation=45, ha='right', fontsize=9)
    axes[1].set_ylabel("Puntuaci√≥n", fontsize=10)
    axes[1].set_ylim(0, 1)
    axes[1].legend(loc="lower right", fontsize=8)

    plt.subplots_adjust(wspace=0.3)  

    # Mostrar en Streamlit
    st.pyplot(fig)

    
# Configurar la p√°gina con t√≠tulo y favicon personalizado
st.set_page_config(
    page_title="Predicci√≥n de Mortalidad",
    page_icon="favicon.ico", 
    layout="wide"
)

# T√≠tulo de la app    
st.title("ü©∫ Mortalidad por fallo card√≠aco üíì")

# Creaci√≥n de pesta√±as 
pesta√±as = ["üîç Predicci√≥n de Mortalidad", "üìä Informaci√≥n del Dataset", "‚öôÔ∏è Modelos de Machine Learning"]
tab1, tab2, tab3 = st.tabs(pesta√±as)

# PESTA√ëA 1: PREDICCI√ìN DE MORTALIDAD
with tab1:
    st.markdown("<h1 style='text-align: center;'>üîç Predicci√≥n de Mortalidad</h1>", unsafe_allow_html=True)
    
    # SECCI√ìN 1: SELECCI√ìN DE MODELOS
    with st.expander("üõ†Ô∏è **Seleccionar Modelos de ML**", expanded=True):
        st.write("Selecciona los modelos con los que deseas hacer la predicci√≥n:")
        modelos_seleccionados = []
        for modelo in modelos.keys():
            if st.checkbox(modelo, value=True):
                modelos_seleccionados.append(modelo)

    # SECCI√ìN 2: INGRESO DE DATOS
    with st.expander("üìå **Ingresar Datos del Paciente**", expanded=True):
        st.write("Introduce los datos cl√≠nicos del paciente:")

        # Dise√±o en columnas para organizar inputs
        col1, col_espacio, col2 = st.columns([1, 0.2, 1])
        with col1:
            age = st.number_input("Edad", min_value=0, max_value=150, value=50)
            ejection_fraction = st.number_input("Fracci√≥n de Eyecci√≥n (%)", min_value=1, max_value=100, value=35)
            serum_creatinine = st.number_input("Creatinina en Suero (mg/dL)", min_value=0.0, max_value=15.0, value=1.1)
            serum_sodium = st.number_input("Sodio en Suero (mEq/L)", min_value=100.0, max_value=200.0, value=137.1)
            platelets = st.number_input("Plaquetas (x10^3/ŒºL)", min_value=10000, max_value=1000000, value=250000)
            creatinine_phosphokinase = st.number_input("Creatinina Fosfocinasa (CPK)", min_value=0, max_value=10000, value=200)

        with col2:
            high_blood_pressure = st.radio("Hipertensi√≥n", ["No", "S√≠"])
            smoking = st.radio("Fuma", ["No", "S√≠"])
            diabetes = st.radio("Diabetes", ["No", "S√≠"])
            anaemia = st.radio("Anemia", ["No", "S√≠"])
            sex = st.radio("Sexo", ["Hombre", "Mujer"])
        

        # Convertir opciones a formato num√©rico
        high_blood_pressure = 1 if high_blood_pressure == "S√≠" else 0
        smoking = 1 if smoking == "S√≠" else 0
        diabetes = 1 if diabetes == "S√≠" else 0
        anaemia = 1 if anaemia == "S√≠" else 0
        sex = 1 if sex == "Hombre" else 0

    # SECCI√ìN 3: BOT√ìN PARA EJECUTAR PREDICCI√ìN
    st.markdown("""
        <style>
            .stButton>button {
                width: 100%;
                border-radius: 8px;
                font-size: 18px;
                font-weight: bold;
                background-color: #007BFF;
                color: white;
                padding: 10px;
                transition: 0.3s;
                border: none;
            }
            .stButton>button:hover {
                background-color: #0056b3;
            }
        </style>
    """, unsafe_allow_html=True)

    # Bot√≥n de predicci√≥n
    if st.button("üîç Predecir Mortalidad"):
        input_data = np.array([age, anaemia, creatinine_phosphokinase, diabetes, ejection_fraction, high_blood_pressure,
                            platelets, serum_creatinine, serum_sodium, sex, smoking]).reshape(1, -1)

        # Predecir con los modelos seleccionados y mostrar resultados
        st.subheader("üìä **Resultados de Predicci√≥n**")
        
        for modelo_nombre in modelos_seleccionados:
            modelo = cargar_modelo(modelo_nombre)
            prediccion = modelo.predict(input_data)

            # Crear contenedor con el resultado del modelo
            with st.container():
                if prediccion[0] in ["yes", 1]:
                    st.error(f"‚ùå **{modelo_nombre}**: Predice Mortalidad")
                else:
                    st.success(f"‚úÖ **{modelo_nombre}**: Predice Supervivencia")


# PESTA√ëA 2: INFORMACI√ìN SOBRE EL DATASET
with tab2:
    st.markdown("<h1 style='text-align: center;'>üìä Informaci√≥n del Dataset</h1>", unsafe_allow_html=True)

    with st.expander("üîó Enlace al Dataset en Kaggle"):
        st.markdown("[üìÇ Dataset en Kaggle](https://www.kaggle.com/datasets/andrewmvd/heart-failure-clinical-data)", unsafe_allow_html=True)

    with st.expander("üìú Descripci√≥n del Dataset"):
        st.write("""
                Las enfermedades cardiovasculares (CVDs) son la principal causa de muerte a nivel mundial, cobrando aproximadamente 17.9 millones de vidas cada a√±o, 
                lo que representa el 31% de todas las muertes en el mundo.

                La insuficiencia card√≠aca es un evento com√∫n causado por las CVDs, y este conjunto de datos contiene 12 variables que pueden utilizarse para predecir 
                la mortalidad por insuficiencia card√≠aca.

                La mayor√≠a de las enfermedades cardiovasculares pueden prevenirse abordando los factores de riesgo conductuales, como el consumo de tabaco, una dieta 
                poco saludable y la obesidad, la inactividad f√≠sica y el consumo perjudicial de alcohol, mediante estrategias de salud p√∫blica.

                Las personas con enfermedades cardiovasculares o que tienen un alto riesgo cardiovascular (debido a la presencia de uno o m√°s factores de riesgo como 
                hipertensi√≥n, diabetes, hiperlipidemia o una enfermedad ya establecida) necesitan detecci√≥n temprana y manejo adecuado, donde un modelo de aprendizaje 
                autom√°tico (Machine Learning) puede ser de gran ayuda.
                 
                A continuaci√≥n se listan las variables que intervienen en el dataset, de las cuales, solo se excluye del estudio la variable 'time', que representa el 
                tiempo de seguimiento del paciente (en d√≠as), es decir, cu√°nto tiempo se monitore√≥ antes de registrar si falleci√≥ o no. En un caso de uso real, cuando 
                un nuevo paciente llegue a la consulta, no conoceremos su tiempo de seguimiento futuro, por lo que esta variable no estar√° disponible para hacer predicciones. 
                """)
        
        df_variables = pd.DataFrame({
        "Variable": ["age", "anaemia", "creatinine_phosphokinase", "diabetes", "ejection_fraction",
                     "high_blood_pressure", "platelets", "serum_creatinine", "serum_sodium",
                     "sex", "smoking", "time (no se usa)", "DEATH_EVENT"],
        "Descripci√≥n": [
            "Edad del paciente (en a√±os).",
            "Indica si el paciente tiene anemia (0 = No, 1 = S√≠).",
            "Nivel de creatina fosfocinasa (CPK) en la sangre (mcg/L).",
            "Indica si el paciente tiene diabetes (0 = No, 1 = S√≠).",
            "Porcentaje de sangre expulsada por el ventr√≠culo izquierdo en cada latido (%).",
            "Indica si el paciente tiene presi√≥n arterial alta (0 = No, 1 = S√≠).",
            "Cantidad de plaquetas en la sangre (x10^3/ŒºL).",
            "Nivel de creatinina en suero (mg/dL), usado para evaluar la funci√≥n renal.",
            "Nivel de sodio en suero (mEq/L), importante para la regulaci√≥n de l√≠quidos en el cuerpo.",
            "Sexo del paciente (0 = Mujer, 1 = Hombre).",
            "Indica si el paciente es fumador (0 = No, 1 = S√≠).",
            "N√∫mero de d√≠as de seguimiento del paciente en el estudio.",
            "Variable objetivo: indica si el paciente falleci√≥ durante el per√≠odo de seguimiento (0 = No, 1 = S√≠)."
            ]
        })

        st.table(df_variables)

    with st.expander("üóÇÔ∏è Vista Previa del Dataset"):
        st.write(df.head())

    with st.expander("üìä Histogramas de las Variables Num√©ricas"):
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        fig.suptitle("Distribuci√≥n de las Variables Num√©ricas", fontsize=18, fontweight='bold')

        columnas_numericas = ["age", "creatinine_phosphokinase", "ejection_fraction",
                            "platelets", "serum_creatinine", "serum_sodium"]

        for i, col in enumerate(columnas_numericas):
            row, col_index = divmod(i, 3)
            sns.histplot(df[col], bins=20, kde=True, ax=axes[row, col_index])
            axes[row, col_index].set_title(col, fontweight='bold', fontsize=14)
            axes[row, col_index].set_xlabel("", fontsize=12)
            axes[row, col_index].set_ylabel("Frecuencia", fontsize=12)
            axes[row, col_index].grid(True, linestyle="--", alpha=0.6)  

        # Ajustar m√°rgenes para evitar superposiciones
        plt.tight_layout(rect=[0, 0, 1, 0.96])
        st.pyplot(fig)


# PESTA√ëA 3: INFORMACI√ìN SOBRE LOS MODELOS
with tab3:
    st.markdown("<h1 style='text-align: center;'>‚öôÔ∏è Modelos de Machine Learning</h1>", unsafe_allow_html=True)

    st.write("""A continuaci√≥n se presentan los modelos empleados, dando una breve descripci√≥n de su funcionamiento y representando 
                las m√©tricas de precisi√≥n alcanzadas por el modelo en los datos de entrenamiento y test.
             """)

    with st.expander("üå≥ √Årbol de Decisi√≥n"):
        st.write("""Modelo que divide los datos en subconjuntos en funci√≥n de condiciones sobre las caracter√≠sticas. 
                 Cada nodo del √°rbol representa una condici√≥n sobre una variable, y cada rama es el resultado de esa condici√≥n.""")

        # Cargar las m√©tricas guardadas
        with open("Metricas/arbol_base.pkl", "rb") as file:
            metricas = pickle.load(file)

        # Mostrar las m√©tricas
        st.subheader("üìä Evaluaci√≥n del Modelo en Train")
        mostrar_matriz_y_reporte(metricas, "Train")

        st.subheader("üìä Evaluaci√≥n del Modelo en Test")
        mostrar_matriz_y_reporte(metricas, "Test")

    with st.expander("üåê Bagging Classifier"):
        st.write("""t√©cnica de ensamblado que mejora la estabilidad y precisi√≥n de modelos inestables, como los √°rboles de decisi√≥n. 
                    Su estrategia consiste en entrenar m√∫ltiples modelos en subconjuntos de datos obtenidos mediante bootstrap 
                    (muestreo con reemplazo) y luego combinar sus predicciones.""")

        # Cargar las m√©tricas guardadas
        with open("Metricas/bagging.pkl", "rb") as file:
            metricas = pickle.load(file)

        # Mostrar las m√©tricas
        st.subheader("üìä Evaluaci√≥n del Modelo en Train")
        mostrar_matriz_y_reporte(metricas, "Train")

        st.subheader("üìä Evaluaci√≥n del Modelo en Test")
        mostrar_matriz_y_reporte(metricas, "Test")

    with st.expander("üå≤ Random Forest"):
        st.write("""Ensamblado de m√∫ltiples √°rboles de decisi√≥n para mayor estabilidad. Introduce aleatorizaci√≥n en la selecci√≥n de 
                    caracter√≠sticas, creando m√∫ltiples √°rboles de decisi√≥n mas diversos y reduciendo la varianza.""")

        # Cargar las m√©tricas guardadas
        with open("Metricas/random_forest.pkl", "rb") as file:
            metricas = pickle.load(file)

        # Mostrar las m√©tricas
        st.subheader("üìä Evaluaci√≥n del Modelo en Train")
        mostrar_matriz_y_reporte(metricas, "Train")

        st.subheader("üìä Evaluaci√≥n del Modelo en Test")
        mostrar_matriz_y_reporte(metricas, "Test")
    
    with st.expander("üìà Gradient Boosting"):
        st.write("""M√©todo de ensamblado basado en boosting, donde cada nuevo √°rbol trata de corregir los errores de los √°rboles anteriores. 
                    Se basa en minimizar el error de predicci√≥n en cada iteraci√≥n.""")

        # Cargar las m√©tricas guardadas
        with open("Metricas/gradient_boosting.pkl", "rb") as file:
            metricas = pickle.load(file)

        # Mostrar las m√©tricas
        st.subheader("üìä Evaluaci√≥n del Modelo en Train")
        mostrar_matriz_y_reporte(metricas, "Train")

        st.subheader("üìä Evaluaci√≥n del Modelo en Test")
        mostrar_matriz_y_reporte(metricas, "Test")

    with st.expander("üöÄ XGBoost"):
        st.write("Modelo avanzado de boosting optimizado para datos estructurados.")

        # Cargar las m√©tricas guardadas
        with open("Metricas/xg_boost.pkl", "rb") as file:
            metricas = pickle.load(file)

        # Mostrar las m√©tricas
        st.subheader("üìä Evaluaci√≥n del Modelo en Train")
        mostrar_matriz_y_reporte(metricas, "Train")

        st.subheader("üìä Evaluaci√≥n del Modelo en Test")
        mostrar_matriz_y_reporte(metricas, "Test")
